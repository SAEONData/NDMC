// <auto-generated />
using System;
using APIv2.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APIv2.Migrations
{
    [DbContext(typeof(SQLDBContext))]
    [Migration("20190123173944_Removed Region from EventRegion")]
    partial class RemovedRegionfromEventRegion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("APIv2.Database.Models.DeclaredEvent", b =>
                {
                    b.Property<int>("DeclaredEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DeclaredDate");

                    b.Property<int>("EventId");

                    b.HasKey("DeclaredEventId");

                    b.HasIndex("EventId");

                    b.ToTable("DeclaredEvents");
                });

            modelBuilder.Entity("APIv2.Database.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EndDate");

                    b.Property<string>("Location_WKT");

                    b.Property<long?>("StartDate");

                    b.Property<int?>("TypeEventId");

                    b.Property<int?>("TypeSourceId");

                    b.HasKey("EventId");

                    b.HasIndex("TypeEventId");

                    b.HasIndex("TypeSourceId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("APIv2.Database.Models.EventImpact", b =>
                {
                    b.Property<int>("EventImpactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventRegionId");

                    b.Property<double?>("Measure");

                    b.Property<int>("TypeImpactId");

                    b.Property<string>("UnitOfMeasure");

                    b.HasKey("EventImpactId");

                    b.HasIndex("EventRegionId");

                    b.HasIndex("TypeImpactId");

                    b.ToTable("EventImpacts");
                });

            modelBuilder.Entity("APIv2.Database.Models.EventRegion", b =>
                {
                    b.Property<int>("EventRegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("RegionId");

                    b.HasKey("EventRegionId");

                    b.HasIndex("EventId");

                    b.ToTable("EventRegions");
                });

            modelBuilder.Entity("APIv2.Database.Models.Mitigation", b =>
                {
                    b.Property<int>("MitigationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Date");

                    b.Property<int>("EventId");

                    b.Property<int>("TypeMitigationId");

                    b.Property<double?>("Value");

                    b.HasKey("MitigationId");

                    b.HasIndex("EventId");

                    b.HasIndex("TypeMitigationId");

                    b.ToTable("Mitigations");
                });

            modelBuilder.Entity("APIv2.Database.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentRegionId");

                    b.Property<string>("RegionName")
                        .IsRequired();

                    b.Property<int?>("RegionTypeId");

                    b.HasKey("RegionId");

                    b.HasIndex("ParentRegionId");

                    b.HasIndex("RegionTypeId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("APIv2.Database.Models.RegionType", b =>
                {
                    b.Property<int>("RegionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionTypeName");

                    b.HasKey("RegionTypeId");

                    b.ToTable("RegionTypes");
                });

            modelBuilder.Entity("APIv2.Database.Models.TypeEvent", b =>
                {
                    b.Property<int>("TypeEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeEventName")
                        .IsRequired();

                    b.HasKey("TypeEventId");

                    b.ToTable("TypeEvents");
                });

            modelBuilder.Entity("APIv2.Database.Models.TypeImpact", b =>
                {
                    b.Property<int>("TypeImpactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentTypeImpactId");

                    b.Property<string>("TypeImpactName")
                        .IsRequired();

                    b.Property<string>("UnitOfMeasure");

                    b.HasKey("TypeImpactId");

                    b.HasIndex("ParentTypeImpactId");

                    b.ToTable("TypeImpacts");
                });

            modelBuilder.Entity("APIv2.Database.Models.TypeMitigation", b =>
                {
                    b.Property<int>("TypeMitigationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentTypeMitigationId");

                    b.Property<string>("TypeMitigationName")
                        .IsRequired();

                    b.Property<string>("UnitOfMeasure");

                    b.HasKey("TypeMitigationId");

                    b.HasIndex("ParentTypeMitigationId");

                    b.ToTable("TypeMitigations");
                });

            modelBuilder.Entity("APIv2.Database.Models.TypeSource", b =>
                {
                    b.Property<int>("TypeSourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeSourceName")
                        .IsRequired();

                    b.Property<string>("TypeSourceSource");

                    b.HasKey("TypeSourceId");

                    b.ToTable("TypeSources");
                });

            modelBuilder.Entity("APIv2.Database.Models.DeclaredEvent", b =>
                {
                    b.HasOne("APIv2.Database.Models.Event", "Event")
                        .WithMany("DeclaredEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIv2.Database.Models.Event", b =>
                {
                    b.HasOne("APIv2.Database.Models.TypeEvent", "TypeEvent")
                        .WithMany()
                        .HasForeignKey("TypeEventId");

                    b.HasOne("APIv2.Database.Models.TypeSource", "TypeSource")
                        .WithMany()
                        .HasForeignKey("TypeSourceId");
                });

            modelBuilder.Entity("APIv2.Database.Models.EventImpact", b =>
                {
                    b.HasOne("APIv2.Database.Models.EventRegion", "EventRegion")
                        .WithMany("EventImpacts")
                        .HasForeignKey("EventRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIv2.Database.Models.TypeImpact", "TypeImpact")
                        .WithMany()
                        .HasForeignKey("TypeImpactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIv2.Database.Models.EventRegion", b =>
                {
                    b.HasOne("APIv2.Database.Models.Event", "Event")
                        .WithMany("EventRegions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIv2.Database.Models.Mitigation", b =>
                {
                    b.HasOne("APIv2.Database.Models.Event", "Event")
                        .WithMany("Mitigations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIv2.Database.Models.TypeMitigation", "TypeMitigation")
                        .WithMany("Mitigations")
                        .HasForeignKey("TypeMitigationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIv2.Database.Models.Region", b =>
                {
                    b.HasOne("APIv2.Database.Models.Region", "ParentRegion")
                        .WithMany()
                        .HasForeignKey("ParentRegionId");

                    b.HasOne("APIv2.Database.Models.RegionType", "RegionType")
                        .WithMany()
                        .HasForeignKey("RegionTypeId");
                });

            modelBuilder.Entity("APIv2.Database.Models.TypeImpact", b =>
                {
                    b.HasOne("APIv2.Database.Models.TypeImpact", "ParentTypeImpact")
                        .WithMany()
                        .HasForeignKey("ParentTypeImpactId");
                });

            modelBuilder.Entity("APIv2.Database.Models.TypeMitigation", b =>
                {
                    b.HasOne("APIv2.Database.Models.TypeMitigation", "ParentTypeMitigation")
                        .WithMany()
                        .HasForeignKey("ParentTypeMitigationId");
                });
#pragma warning restore 612, 618
        }
    }
}
